# 🏗️ **AllApp Python Backend Architecture**

---

## 🧩 **Tech Stack Overview**

- **Web Framework**: `FastAPI` (async, scalable API service)
- **Database**: `PostgreSQL` (with SQLAlchemy)
- **ORM**: `SQLAlchemy + Alembic`
- **Task Queue**: `Celery` with `Redis`
- **Storage**: S3-compatible (AWS S3 or MinIO)
- **Authentication**: OAuth2/JWT
- **WebSockets**: Native FastAPI + Redis PubSub
- **File Structure**: Modular Monorepo (feature-based)

---

## 🗂️ **Project Structure**

```
allapp/
├── app/
│   ├── main.py                     # FastAPI instance and routers inclusion
│   ├── config.py                   # Settings, env variables, keys
│   ├── core/                       # Core utilities
│   │   ├── security.py             # JWT tokens, hashing, auth guards
│   │   ├── permissions.py          # Role-based access controls
│   │   └── verification.py         # Civic test logic, ID checks
│   ├── models/                     # SQLAlchemy models (modular)
│   │   ├── user.py
│   │   ├── job.py
│   │   ├── project.py
│   │   ├── wallet.py
│   │   ├── transaction.py
│   │   └── sector.py
│   ├── schemas/                    # Pydantic request/response models
│   │   └── job.py, user.py, ...
│   ├── crud/                       # Database interactions
│   │   └── job.py, user.py, ...
│   ├── services/                   # Business logic
│   │   ├── copin.py                # Wallet/transaction logic
│   │   ├── civic_test.py
│   │   ├── notification.py
│   │   └── map.py
│   ├── api/                        # API routes
│   │   ├── v1/
│   │   │   ├── user.py
│   │   │   ├── job.py
│   │   │   ├── project.py
│   │   │   └── wallet.py
│   │   └── api_router.py          # Combine all routers
│   ├── workers/                    # Celery background jobs
│   │   ├── tasks.py                # Notifications, reminders
│   │   └── periodic.py            # Monthly checks (data cleanup)
│   └── websocket/                 # Real-time features
│       └── chat.py                # Chat, presence
│
├── tests/                         # Pytest suite
│   └── test_jobs.py, test_user.py ...
├── alembic/                       # Migrations
├── requirements.txt / pyproject.toml
├── docker-compose.yml
└── README.md
```

---

## 🔐 **Modular Domains (by Feature)**

Each **feature = its own model + schema + routes + services + CRUD logic**:

| Feature       | Responsibility |
|---------------|----------------|
| **Users**      | Auth, profile, role access, verification, privacy settings |
| **Jobs**       | Post/apply/track jobs, rating logic |
| **Projects**   | Milestones, contributions, chat, comment system |
| **Wallet**     | Copin balance, transfers, transactions |
| **Education**  | Courses, civic test, badges, certificates |
| **Groups**     | Teams, forums, discussions |
| **Chat**       | WebSockets, message threads |
| **Calendar**   | Event syncing, reminders |
| **Map**        | Sector-tagged locations, services, POIs |
| **Sector Tags**| All content tagged for categorization and filtering |
| **Public Services** | Directory with data validation tools |

---

## 🛠️ **Core Concepts**

### 1. **Dependency Injection (FastAPI)**
- Inject current user, access level, sector context into every route
- Example: `Depends(get_current_user)` or `Depends(require_verified_user)`

---

### 2. **Role-Based Access**
```python
def require_full_user(user: User = Depends(get_current_user)):
    if not user.is_verified or not user.civic_passed:
        raise HTTPException(403, "Full access not granted")
    return user
```

---

### 3. **Permissions Middleware**
- Before any CRUD action (like posting, reviewing), check:
  - Civic test
  - Participation history (e.g., visited location)
  - Ownership/admin status

---

### 4. **Event & Message Bus**
- Use **Redis PubSub** to trigger:
  - Notification events (new job posted, payout received)
  - Status updates (project declared finished)
  - Chat messages

---

### 5. **Task Queue (Celery)**
- Use for:
  - Monthly data confirmation check
  - Batch transaction cleanup
  - Email or push notifications
  - Civic test scoring + user ranking updates

---

### 6. **Copin Ledger Model (Simplified)**

```python
class Transaction(Base):
    id = Column(UUID, primary_key=True, default=uuid4)
    sender_id = Column(UUID, ForeignKey('user.id'))
    receiver_id = Column(UUID, ForeignKey('user.id'))
    amount = Column(DECIMAL)
    fee = Column(DECIMAL)
    type = Column(String)  # transfer, reward, withdrawal
    timestamp = Column(DateTime, default=datetime.utcnow)
    description = Column(Text)
```

---

## 🧪 Testing Strategy

- Use **Pytest** with `TestClient` for endpoint testing
- Factory Boy for test users/data
- Coverage tracking + CI hooks via **GitHub Actions**

---

## 🔌 DevOps & Deployment (Containerized)

- **Docker + Docker Compose** for dev environments
- **NGINX + Gunicorn/Uvicorn** for production FastAPI serving
- **S3 or MinIO** for media/document storage
- Use **Traefik or API Gateway** for service rate limiting and security

---

## ✅ Summary: Scalable Python Architecture for AllApp

- **Feature-based structure** keeps logic clean and maintainable  
- **FastAPI + SQLAlchemy** is lightweight, async, and modular  
- **Celery + Redis** covers async needs  
- **Copin logic** is ledger-driven with real-world transparency  
- WebSockets + Chat, Calendar, Civic System, and Wallet are **isolated modules**  
- All deeply integrated with **permissions, roles, and privacy logic**
